name: Release homebrew formula

on:
  workflow_dispatch:
    inputs:
      pushHomebrewFormula:
        description: 'push homebrew formula'
        type: boolean
        required: false
        default: true
      pushChocolateyPackage:
        description: 'push chocolatey package'
        type: boolean
        required: false
        default: true
      manualTrigger:
        description: 'To target a manual triggered job '
        type: boolean
        required: false
        default: true
        
  workflow_run:
    workflows: ["Release"]
    types:
      - completed

jobs:
  generateHomebrewFormula:
    if: ${{ github.event.workflow_run.conclusion == 'success' || (inputs.manualTrigger && inputs.pushHomebrewFormula) }}
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout formula repository
        uses: actions/checkout@v4
        with:
          repository: arleypadua/homebrew-pkhex-cli
          token: ${{ secrets.GIT_HUB_HOMEBREW_FORMULA_TOKEN }}

      - name: Fetch latest release metadata
        id: fetch_metadata
        run: |
          curl -s https://api.github.com/repos/arleypadua/PKHeX.CLI/releases/latest > latest_release.json

      - name: Parse release metadata
        id: parse_metadata
        run: |
          VERSION=$(jq -r .tag_name latest_release.json)
          OSX_ARM64_URL=$(jq -r '.assets[] | select(.name | test("pkhex-cli-osx-arm64.zip")) | .browser_download_url' latest_release.json)
          OSX_X64_URL=$(jq -r '.assets[] | select(.name | test("pkhex-cli-osx-x64.zip")) | .browser_download_url' latest_release.json)
          LINUX_X64_URL=$(jq -r '.assets[] | select(.name | test("pkhex-cli-linux-x64.zip")) | .browser_download_url' latest_release.json)

          # compute sha256 checksum
          curl -L -o pkhex-cli-osx-arm64.zip $OSX_ARM64_URL
          SHA256_OSX_ARM64=$(sha256sum pkhex-cli-osx-arm64.zip | awk '{ print $1 }')
          
          curl -L -o pkhex-cli-osx-x64.zip $OSX_X64_URL
          SHA256_OSX_X64=$(sha256sum pkhex-cli-osx-x64.zip | awk '{ print $1 }')
          
          curl -L -o pkhex-cli-linux-x64.zip $LINUX_X64_URL
          SHA256_LINUX_X64=$(sha256sum pkhex-cli-linux-x64.zip | awk '{ print $1 }')

          # output extracted information
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "osx_arm64_url=$OSX_ARM64_URL" >> "$GITHUB_OUTPUT"
          echo "osx_x64_url=$OSX_X64_URL" >> "$GITHUB_OUTPUT"
          echo "linux_x64_url=$LINUX_X64_URL" >> "$GITHUB_OUTPUT"
          
          echo "sha256_osx_arm64=$SHA256_OSX_ARM64" >> "$GITHUB_OUTPUT"
          echo "sha256_osx_x64=$SHA256_OSX_X64" >> "$GITHUB_OUTPUT"
          echo "sha256_linux_x64=$SHA256_LINUX_X64" >> "$GITHUB_OUTPUT"

      - name: Generate pkhex-cli.rb formula
        run: |
          cat <<EOF > Formula/pkhex-cli.rb
          class PkhexCli < Formula
            version "${{ steps.parse_metadata.outputs.version }}"
            desc "A CLI to manipulate pokemon game save files."
            homepage "https://github.com/arleypadua/PKHeX.CLI"

            if OS.mac? && Hardware::CPU.arm?
              url "${{ steps.parse_metadata.outputs.osx_arm64_url }}"
              sha256 "${{ steps.parse_metadata.outputs.sha256_osx_arm64 }}"
            elsif OS.mac?
              url "${{ steps.parse_metadata.outputs.osx_x64_url }}"
              sha256 "${{ steps.parse_metadata.outputs.sha256_osx_x64 }}"
            elsif OS.linux?
              url "${{ steps.parse_metadata.outputs.linux_x64_url }}"
              sha256 "${{ steps.parse_metadata.outputs.sha256_linux_x64 }}"
            end

            def install
              bin.install "pkhex-cli"
            end

            test do
              system "#{bin}/pkhex-cli --version"
            end
          end
          EOF
          
      - name: Commit and push pkhex-cli.rb to another repository
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"
          git add Formula/pkhex-cli.rb
          git commit -m "update pkhex-cli formula to version ${{ steps.parse_metadata.outputs.version }}"
          git push origin

  publishChocolateyPackage:
    if: ${{ github.event.workflow_run.conclusion == 'success' || (inputs.manualTrigger && inputs.pushChocolateyPackage) }}
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch latest release metadata
        id: fetch_parse_metadata
        run: |
          $latest_release = Invoke-RestMethod -Uri https://api.github.com/repos/arleypadua/PKHeX.CLI/releases/latest
          $version = $latest_release.tag_name -replace '^v'
          $windows_asset = $latest_release.assets | Where-Object { $_.name -like "pkhex-cli-win-x64.zip" }
          $windows_url = $windows_asset.browser_download_url

          Invoke-WebRequest -Uri $windows_url -OutFile pkhex-cli-win-x64.zip
          $sha256_windows = (Get-FileHash -Path pkhex-cli-win-x64.zip -Algorithm SHA256).Hash

          echo "version=$version" >> $env:GITHUB_ENV
          echo "windows_url=$windows_url" >> $env:GITHUB_ENV
          echo "sha256_windows=$sha256_windows" >> $env:GITHUB_ENV

      - name: Create pkhex-cli.nuspec
        run: |
          $nuspecContent = @"
          <?xml version="1.0"?>
          <package xmlns="http://schemas.microsoft.com/packaging/2011/08/nuspec.xsd">
            <metadata>
              <id>pkhex-cli</id>
              <version>${{ steps.fetch_parse_metadata.outputs.version }}</version>
              <title>pkhex-cli</title>
              <authors>Arley Pádua</authors>
              <owners>Arley Pádua</owners>
              <description>PKHeX</description>
              <summary>Cross platform CLI tool for interacting with Pokemon save files. Works with Mac OS, Linux and Windows.</summary>
              <projectUrl>https://github.com/arleypadua/PKHeX.CLI</projectUrl>
              <licenseUrl>https://github.com/arleypadua/PKHeX.CLI/tree/main?tab=MIT-1-ov-file#readme</licenseUrl>
              <requireLicenseAcceptance>false</requireLicenseAcceptance>
              <tags>CLI, PKHeX</tags>
            </metadata>
            <files>
              <file src="tools\**" target="tools" />
            </files>
          </package>
          "@

          $nuspecContent | Out-File -FilePath pkhex-cli.nuspec

      - name: Create tools directory and move executable
        run: |
          New-Item -ItemType Directory -Force -Path tools
          Move-Item -Path pkhex-cli-win-x64.zip -Destination tools/

      - name: Pack the Chocolatey package
        run: choco pack

      - name: Push the Chocolatey package
        run: choco push pkhex-cli.${{ steps.fetch_parse_metadata.outputs.version }}.nupkg --source https://push.chocolatey.org/ --api-key ${{ secrets.CHOCOLATEY_API_KEY }}

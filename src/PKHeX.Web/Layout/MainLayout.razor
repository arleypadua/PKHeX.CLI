@inherits LayoutComponentBase
@using PKHeX.Web.Services.Plugins
@implements IDisposable
@inject NavigationManager Navigation
@inject GameService GameService

<Layout Style="min-height: 100vh">
    <Sider Collapsible
           Breakpoint="@BreakpointType.Lg"
           CollapsedWidth="64"
           @bind-Collapsed=@_collapsed>

        <div class="logo">PKHeX.Web</div>

        <Menu
            Theme="MenuTheme.Dark"
            Mode="MenuMode.Inline"
            DefaultSelectedKeys="@( [SelectedMenuItem?.Route ?? string.Empty])"
            SelectedKeys="@( [SelectedMenuItem?.Route ?? string.Empty])">
            @foreach (var item in MenuItems)
            {
                @if (item.Nested is null || item.Nested.Count == 0)
                {
                    @RenderMenu(item)
                }
                else
                {
                    RenderFragment subtitle =
                        @<span>
                            @if (item.Icon is not null)
                            {
                                <Icon Type="@item.Icon" Theme="outline"/>
                            }
                            <span>@item.Label</span>
                        </span>;

                    <SubMenu Key="@item.Route" TitleTemplate="subtitle">
                        @foreach (var sub in item.Nested)
                        {
                            @RenderMenu(sub)
                        }
                    </SubMenu>
                }
            }
        </Menu>
    </Sider>
    <Layout>
        <Header Class="site-layout-sub-header-background" Style="padding: 0; display: flex; justify-content: center;">
            @if (_collapsed)
            {
                <span class="layout-header">@SelectedMenuItem?.Label</span>
            }
        </Header>
        <Content Style=" margin: 24px 16px 0;">
            <div class="site-layout-background" style="padding: 24px; min-height: 360px">
                @Body
            </div>
        </Content>
        <PkHexFooter/>
    </Layout>

</Layout>

@code {
    [Inject] public required PlugInRegistry PlugInRegistry { get; set; }

    bool _collapsed;
    MenuItem? SelectedMenuItem => MenuItems.SingleOrDefault(m => m.Route == Navigation.CurrentRoute());

    IEnumerable<MenuItem> MenuItems =>
    [
        new("", "Home", "home"),
        new("party", "Party", "team"),
        new("pokemon-box", "Pokemon Box", "inbox"),
        new("items", "Items", "shop"),

        new("save", "Save", "save"),
        new("plugins", "Plug-Ins", "api", PluginMenuItems)
    ];

    List<MenuItem> PluginMenuItems
    {
        get
        {
            var plugIns = PlugInRegistry.GetAllPlugins()
                .Select(p => new MenuItem($"plugins/{p.Id}", p.Settings.Manifest.PlugInName))
                .ToList();
            
            if (plugIns.Any()) plugIns.Add(new MenuItem("plugins", "Manage Plug-Ins"));

            return plugIns;
        }
    }

    protected override void OnInitialized()
    {
        GameService.OnGameLoaded += OnGameLoaded;
        PlugInRegistry.OnPlugInChanged += OnPlugInChanged;
        ToLoadIfNotLoaded();
    }

    protected override void OnAfterRender(bool firstRender) => ToLoadIfNotLoaded();

    private void ToLoadIfNotLoaded()
    {
        if (!GameService.IsLoaded)
        {
            Navigation.NavigateTo("/load");
        }
    }

    private void OnGameLoaded(object? sender, EventArgs args)
    {
        Navigation.NavigateTo("/");
    }


    private void OnPlugInChanged(LoadedPlugIn plugin, PlugInRegistry.ChangeType type)
    {
        Navigation.NavigateTo("/");
    }

    private RenderFragment RenderMenu(MenuItem item) =>
        @<MenuItem Key="@item.Route">
            @if (item.Icon is not null)
            {
                <Icon Type="@item.Icon" Theme="outline"/>
            }

            <span class="nav-text">
                <a href="@item.Route">@item.Label</a>
            </span>
        </MenuItem>;

    record MenuItem(string Route, string Label, string? Icon = null, List<MenuItem>? Nested = null);

    public void Dispose()
    {
        GameService.OnGameLoaded -= OnGameLoaded;
        PlugInRegistry.OnPlugInChanged -= OnPlugInChanged;
    }

}

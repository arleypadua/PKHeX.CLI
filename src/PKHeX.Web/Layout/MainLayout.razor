@inherits LayoutComponentBase
@implements IDisposable
@inject NavigationManager Navigation
@inject GameService GameService

<Layout Style="min-height: 100vh">
    <Sider Collapsible
           Breakpoint="@BreakpointType.Lg"
           CollapsedWidth="64"
           @bind-Collapsed=@_collapsed>

        <div class="logo">PKHeX.Web</div>

        <Menu 
            Theme="MenuTheme.Dark" 
            Mode="MenuMode.Inline" 
            DefaultSelectedKeys="@([SelectedMenuItem?.Route ?? string.Empty])"
            SelectedKeys="@([SelectedMenuItem?.Route ?? string.Empty])">
            @foreach (var item in _menuItems)
            {
                <MenuItem Key="@item.Route">
                    @if (item.Icon is not null)
                    {
                        <Icon Type="@item.Icon" Theme="outline"/>
                    }

                    <span class="nav-text">
                        <a href="@item.Route">@item.Label</a>
                    </span>
                </MenuItem>
            }
        </Menu>
    </Sider>
    <Layout>
        <Header Class="site-layout-sub-header-background" Style="padding: 0; display: flex; justify-content: center;">
            @if (_collapsed)
            {
                <span class="layout-header">@SelectedMenuItem?.Label</span>
            }
        </Header>
        <Content Style=" margin: 24px 16px 0;">
            <div class="site-layout-background" style="padding: 24px; min-height: 360px">
                @Body
            </div>
        </Content>
        <PkHexFooter />
    </Layout>

</Layout>

@code {
    bool _collapsed;
    MenuItem? SelectedMenuItem => _menuItems.SingleOrDefault(m => m.Route == Navigation.CurrentRoute());

    readonly IEnumerable<MenuItem> _menuItems =
    [
        new("", "Home", "home"),
        new("party", "Party", "team"),
        new("pokemon-box", "Pokemon Box", "inbox"),
        new("items", "Items", "shop"),
        
        new ("save", "Save", "save"),
    ];
    
    protected override void OnInitialized()
    {
        GameService.OnGameLoaded += OnGameLoaded;
        ToLoadIfNotLoaded();
    }

    protected override void OnAfterRender(bool firstRender) => ToLoadIfNotLoaded();

    private void ToLoadIfNotLoaded()
    {
        if (!GameService.IsLoaded)
        {
            Navigation.NavigateTo("/load");
        }
    }

    private void OnGameLoaded(object? sender, EventArgs args)
    {
        Navigation.NavigateTo("/");
    }

    record MenuItem(string Route, string Label, string? Icon = null);

    public void Dispose()
    {
        GameService.OnGameLoaded -= OnGameLoaded;
    }
}
@page "/pokemon-box"
@using PKHeX.Core
@inject NavigationManager Navigate
@inject ClipboardService Clipboard
@inject INotificationService Notification

<PageTitle>Pokemon Box</PageTitle>

<Space Direction="DirectionVHType.Vertical" Style="width: 100%; gap: 20px;">
    <PageHeader BackIcon="true" Style="max-width: 100%">
        <TitleTemplate>Box</TitleTemplate>

        <PageHeaderExtra>
            <ButtonOrMenu Actions="ExtraActions" />
        </PageHeaderExtra>
    </PageHeader>

    <PokemonTable 
        DataSource="@PokemonList" 
        Source="PokemonSource.Box" 
        Selectable
        @bind-SelectedPokemons="_selectedPokemonList" />

</Space>

@code {
    [Inject] public required GameService GameService { get; set; }
    [Inject] public required JsService Js { get; set; }

    private IList<ButtonOrMenu.ButtonAction> ExtraActions => new List<ButtonOrMenu.ButtonAction>
    {
        new ()
        {
            Type = ButtonType.Primary,
            Label = "Add",
            OnClickAsync = OnAddItemClick,
        },
        new ()
        {
            Type = ButtonType.Link,
            Icon = IconType.Outline.Calculator,
            Label = "Calculator",
            OnClickAsync = HandleCalculatorClick,
        },
        new ()
        {
            Type = ButtonType.Link,
            Icon = IconType.Outline.Copy,
            Label = "Showdown",
            OnClickAsync = HandleExportShowdownClick,
        },
    };

    private IList<Pokemon> PokemonList => GameService.Game?.Trainer.PokemonBox.All
        .Where(p => p.Species != Species.None).ToList() ?? [];

    private IList<Pokemon> _selectedPokemonList = [];

    private Task OnAddItemClick()
    {
        Navigate.NavigateToSearchEncounter();
        return Task.CompletedTask;
    }

    private Task HandleExportShowdownClick()
    {
        if (PokemonList.Count != 0)
        {
            Clipboard.WriteTextAsync(PokemonList.Showdown());
            _ = Notification.Open(new()
            {
                Message = "Showdown copied to clipboard",
                Description = $"{PokemonList.Count} entries",
                NotificationType = NotificationType.Success,
            });
        }
        else
        {
            _ = Notification.Open(new()
            {
                Message = "No pokemons found in your box",
                NotificationType = NotificationType.Error,
            });
        }

        return Task.CompletedTask;
    }

    private Task HandleCalculatorClick()
    {
        var toBeExported = _selectedPokemonList.Any() ? _selectedPokemonList : PokemonList;
        return Js.OpenSmogonDamageCalc(toBeExported);
    }
}
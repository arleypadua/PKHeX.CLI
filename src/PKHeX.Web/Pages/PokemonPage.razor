@page "/pokemon/{PartyOrBox}/{UniqueIdString}"
@using PKHeX.Web.Plugins
@using PKHeX.Web.Services.Plugins
@inject NavigationManager Navigation

@if (_editingPokemon is not null)
{
    <Space Style="width: 100%; gap: 20px;" Direction="DirectionVHType.Vertical">
        <PokemonEdit
            Pokemon="_editingPokemon"/>

        <Space Align="end" Style="width: 100%" Direction="DirectionVHType.Vertical">
            <Button
                Type="@ButtonType.Primary"
                OnClick="HandleSaveClick">Save</Button>
        </Space>
    </Space>
}

@code {
    [Inject] public required PlugInRuntime PlugInRuntime { get; set; }
    [Inject] public required GameService GameService { get; set; }
    [Inject] public required JsService Js { get; set; }

    [Parameter] public required string PartyOrBox { get; set; }
    [Parameter] public required string UniqueIdString { get; set; }

    private UniqueId UniqueId => UniqueId.From(UniqueIdString);

    private Pokemon? OriginalPokemon => PartyOrBox switch
    {
        Party => GameService.Game?.Trainer.Party.Pokemons.FirstOrDefault(p => p.UniqueId.Equals(UniqueId)),
        Box => GameService.Game?.Trainer.PokemonBox.All.FirstOrDefault(p => p.UniqueId.Equals(UniqueId)),
        _ => null
    };

    private Pokemon? _editingPokemon;

    protected override void OnInitialized()
    {
        _editingPokemon = OriginalPokemon?.Clone();
    }

    private const string Party = "party";
    private const string Box = "box";

    private PokemonSource PokemonSource => PartyOrBox switch
    {
        Party => PokemonSource.Party,
        Box => PokemonSource.Box,
        _ => throw new NotSupportedException($"{PartyOrBox} not supported")
    };

    private async Task HandleSaveClick()
    {
        if (OriginalPokemon is null || _editingPokemon is null) return;
        var idChanged = !OriginalPokemon.UniqueId.Equals(_editingPokemon.UniqueId);

        OriginalPokemon.Game.Trainer.AddOrUpdate(OriginalPokemon.UniqueId, _editingPokemon, PokemonSource);

        await PlugInRuntime.RunAll<IRunOnPokemonSave>(h => h.OnPokemonSaved(_editingPokemon));
        
        // some changes might change the id of the Pok√©mon
        if (idChanged)
        {
            Navigation.NavigateToPokemon(PokemonSource, _editingPokemon.UniqueId, replace: true);
        }
        
        await Js.NavigateBack();
    }

}
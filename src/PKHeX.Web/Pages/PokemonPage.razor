@page "/pokemon/{PartyOrBox}/{UniqueIdString}"
@inject NavigationManager Navigation

@if (Pokemon is not null)
{
    <PokemonEdit 
        Pokemon="Pokemon"
        PokemonChanged="HandlePokemonChange"/>
}

@code {
    [Inject] public required GameService GameService { get; set; }
    
    [Parameter] public required string PartyOrBox { get; set; }
    [Parameter] public required string UniqueIdString { get; set; }

    private UniqueId UniqueId => UniqueId.From(UniqueIdString);

    private Pokemon? Pokemon => PartyOrBox switch
    {
        Party => GameService.Game?.Trainer.Party.Pokemons.FirstOrDefault(p => p.UniqueId.Equals(UniqueId)),
        Box => GameService.Game?.Trainer.PokemonBox.All.FirstOrDefault(p => p.UniqueId.Equals(UniqueId)),
        _ => null
    };

    private const string Party = "party";
    private const string Box = "box";

    void HandlePokemonChange(Pokemon changedPokemon)
    {
        if (changedPokemon.UniqueId.Equals(UniqueId)) return;
        
        // some changes might change the id of the PokÃ©mon
        Navigation.NavigateToPokemon(PokemonSource, changedPokemon.UniqueId, replace: true);
    }

    private PokemonSource PokemonSource => PartyOrBox switch
    {
        Party => PokemonSource.Party,
        Box => PokemonSource.Box,
        _ => throw new NotSupportedException($"{PartyOrBox} not supported")
    };

}
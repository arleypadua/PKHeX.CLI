@page "/items"
@using PKHeX.Facade.Repositories
@using PKHeX.Web.Plugins
@using PKHeX.Web.Services.Plugins

<Space Direction="DirectionVHType.Vertical" Style="width: 100%;gap: 20px;">
    <PageHeader BackIcon="true" Style="max-width: 100%">
        <TitleTemplate>Items</TitleTemplate>

        <PageHeaderExtra>
            <Button Type="@ButtonType.Primary" Icon="@IconType.Outline.Plus" OnClick="OnAddItemClick">Add</Button>
        </PageHeaderExtra>
    </PageHeader>

    <Tabs @bind-ActiveKey="@_activeKey" DefaultActiveKey="@DefaultActiveKey" Class="tab-scrollable" Animated>
        @foreach (var inventoryType in InventoryTypes)
        {
            <TabPane Tab="@inventoryType" Key="@inventoryType">
                <ItemsTable
                    Inventory="Inventories?[inventoryType]"
                    DataSource="@(Inventories?[inventoryType].Where(i => i.Definition.Id != ItemDefinition.None).ToList())"/>
            </TabPane>
        }
    </Tabs>
</Space>

@if (ActiveInventory is not null)
{
    <AddItemModal
        @bind-Visible="@_addItemModalVisible"
        TargetInventory="ActiveInventory"
        OnOk="@HandleOk"
        OnCancel="@HandleCancel"/>
}

@code {
    [Inject] public required PlugInRuntime PlugInRuntime { get; set; }
    [Inject] public required GameService GameService { get; set; }

    string? _activeKey;

    Inventories? Inventories => GameService.Game?.Trainer.Inventories;
    Inventory? ActiveInventory => string.IsNullOrWhiteSpace(_activeKey) ? null : Inventories?[_activeKey];
    string[] InventoryTypes => Inventories?.InventoryTypes.OrderBy(t => t).ToArray() ?? [];
    string? DefaultActiveKey => InventoryTypes.FirstOrDefault();

    #region Add Item Modal

    bool _addItemModalVisible;

    void OnAddItemClick()
    {
        _addItemModalVisible = true;
    }

    async Task HandleOk(AddItemModal.ItemToBeAdded itemToBeAdded)
    {
        if (ActiveInventory is null) return;
        ActiveInventory?.Set(itemToBeAdded.Id, itemToBeAdded.Count);

        await PlugInRuntime.RunAll<IRunOnItemChanged>(h => h.OnItemChanged(new(itemToBeAdded.Id, itemToBeAdded.Count)));
        _addItemModalVisible = false;
    }

    private void HandleCancel()
    {
        _addItemModalVisible = false;
    }

    #endregion

}
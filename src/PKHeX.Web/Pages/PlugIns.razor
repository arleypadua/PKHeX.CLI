@page "/plugins"
@using PKHeX.Web.Services.Plugins

<Space Direction="DirectionVHType.Vertical" Style="width: 100%; gap: 20px;">
    <PageHeader BackIcon="true" Style="max-width: 100%">
        <TitleTemplate>Manage Plug-Ins</TitleTemplate>
    </PageHeader>

    @if (Registry.GetAllPlugins().Any())
    {
        <Title Level="2">Installed</Title>
        <Table
            TItem="InstalledPlugIn"
            DataSource="@InstalledPlugIns"
            @bind-PageIndex="_installedPlugInsPageIndex"
            @bind-PageSize="_installedPlugInsPageSize"
            Size="TableSize.Small"
            Responsive
            EnableVirtualization>
            <PropertyColumn Title="Id" Property="@(c => c.PlugIn.Id)" Sortable Filterable/>
            <ActionColumn Title="Actions">
                <Space Size=@("middle")>
                    <SpaceItem>
                        <Button
                            OnClick="() => HandleUninstallClick(context.PlugIn)"
                            Type="@ButtonType.Link"
                            Danger>
                            Uninstall
                        </Button>
                    </SpaceItem>
                </Space>
            </ActionColumn>
        </Table>
    }

    @if (_availablePlugIns.Any())
    {
        <Title Level="2">Discover</Title>
        <Table
            TItem="PlugInAndSource"
            DataSource="@_availablePlugIns"
            @bind-PageIndex="_availablePlugInsPageIndex"
            @bind-PageSize="_availablePlugInsPageSize"
            Size="TableSize.Small"
            Responsive
            EnableVirtualization>
            <PropertyColumn Title="Id" Property="@(c => c.PlugIn.Id)" Sortable Filterable>
                @if (string.IsNullOrWhiteSpace(context.PlugIn.ProjectUrl))
                {
                    @context.PlugIn.Name
                }
                else
                {
                    <a href="@context.PlugIn.ProjectUrl" target="_blank">
                        @context.PlugIn.Name
                    </a>
                    <Icon Type="link" Theme="outline"/>
                }
            </PropertyColumn>
            <PropertyColumn Title="Source" Property="@(c => c.Source.Name)" Sortable Filterable/>
            <PropertyColumn Title="Name" Property="@(c => c.PlugIn.Name)" Sortable Filterable/>
            <ActionColumn Title="Actions">
                <Space Size=@("middle")>
                    <SpaceItem>
                        <Button
                            Type="@ButtonType.Link"
                            OnClick="() => HandleInstallClick(context.Source, context.PlugIn)">
                            Install
                        </Button>
                    </SpaceItem>
                </Space>
            </ActionColumn>
        </Table>
    }

</Space>

@code {
    [Inject] public required PlugInRegistry Registry { get; set; }
    [Inject] public required PlugInService PlugInService { get; set; }
    [Inject] public required PlugInSourceService PlugInSourceService { get; set; }

    private List<PlugInAndSource> _availablePlugIns = [];

    private List<InstalledPlugIn> InstalledPlugIns => Registry.GetAllPlugins()
        .Select(p => new InstalledPlugIn { PlugIn = p })
        .ToList();

    private int _availablePlugInsPageIndex = 1;
    private int _availablePlugInsPageSize = 20;

    private int _installedPlugInsPageIndex = 1;
    private int _installedPlugInsPageSize = 20;

    private Task HandleUninstallClick(LoadedPlugIn plugin)
    {
        PlugInService.Uninstall(plugin);
        return Task.CompletedTask;
    }

    private Task HandleInstallClick(PlugInSource source, PlugInSource.PlugIn plugin)
    {
        return PlugInService.InstallFrom(source.GetLatestDownloadUrl(plugin));
    }

    protected override Task OnInitializedAsync()
    {
        return RefreshAvailablePlugIns();
    }

    private async Task RefreshAvailablePlugIns()
    {
        _availablePlugIns = (await PlugInSourceService.GetPlugInSources())
            .SelectMany(
                p => p.PlugIns,
                (source, plugin) => new PlugInAndSource { Source = source, PlugIn = plugin })
            .Where(p => !Registry.IsRegistered(p.PlugIn.Id))
            .ToList();
    }

    class PlugInAndSource
    {
        public required PlugInSource Source { get; set; }
        public required PlugInSource.PlugIn PlugIn { get; set; }
    }

    class InstalledPlugIn
    {
        public required LoadedPlugIn PlugIn { get; set; }
    }

}
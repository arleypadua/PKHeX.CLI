@page "/analytics"
@using PKHeX.Facade.Repositories
@using PKHeX.Web.Services.AnalyticsResults
@inject AnalyticsResultsService AnalyticsResultService

<Space Wrap="true" Class="chart_deck" Size="@("small")">
    @if (_gameLoads.Any())
    {
        <SpaceItem Class="chart_card">
            <Card Bordered="false" Title=@("Edits by country")>
                <Pie Data="GameLoadCountByCountry" Config="_pieConfig"/>
            </Card>
        </SpaceItem>

        <SpaceItem Class="chart_card">
            <Card Bordered="false" Title=@("Edits by version")>
                <Pie Data="GameLoadByVersion" Config="_pieConfig"/>
            </Card>
        </SpaceItem>
    }
</Space>

<Space Wrap="true" Class="chart_deck" Size="@("small")" Style="margin-top: 20px;">
    @if (_speciesCount.Any())
    {
        <SpaceItem Class="chart_card">
            <Card Bordered="false" Title=@("Species changed")>
                <Treemap Data="SpeciesCountData" Config="_treemapConfig"/>
            </Card>
        </SpaceItem>
    }
    
    @if (_itemsCount.Any())
    {
        <SpaceItem Class="chart_card">
            <Card Bordered="false" Title=@("Items changed")>
                <Treemap Data="ItemsCountData" Config="_treemapConfig"/>
            </Card>
        </SpaceItem>
    }
</Space>

@code {
    private Dictionary<string, List<GameLoadedByCountryRepresentation>> _gameLoads = [];
    private List<(SpeciesDefinition Definition, int Count)> _speciesCount = [];
    private List<(ItemDefinition Definition, int Count)> _itemsCount = [];

    IEnumerable<object> GameLoadCountByCountry => _gameLoads
        .Select(l => new
        {
            type = l.Key,
            value = l.Value.Sum(c => c.CountNumber)
        })
        .Where(v => v.value > 1);

    IEnumerable<object> GameLoadByVersion => _gameLoads.Values
        .SelectMany(v => v)
        .GroupBy(g => g.VersionName)
        .Select(g => new
        {
            type = g.Key,
            value = g.Sum(l => l.CountNumber)
        })
        .Where(v => v.value > 1);
    
    Data SpeciesCountData => new()
    {
        Name = "root",
        Children = _speciesCount
            .Select(s => new TreemapDataItem
            {
                Name = s.Definition.Name,
                Value = s.Count
            })
            .ToList(),
        Value = _speciesCount
            .Sum(s => s.Count)
    };
    
    Data ItemsCountData => new()
    {
        Name = "root",
        Children = _itemsCount
            .Select(s => new TreemapDataItem
            {
                Name = s.Definition.Name,
                Value = s.Count
            })
            .ToList(),
        Value = _speciesCount
            .Sum(s => s.Count)
    };

    readonly PieConfig _pieConfig = new()
    {
        Radius = 0.8,
        AngleField = "value",
        ColorField = "type",
        Label = new PieLabelConfig
        {
            Visible = true,
            Type = "inner",
            Offset = 20,
            AutoRotate = false,
            Field = "type"
        },
        AutoFit = true
    };
    
    readonly TreemapConfig _treemapConfig = new()
    {
        ColorField = "name",
    };

    protected override async Task OnInitializedAsync()
    {
        _gameLoads = await AnalyticsResultService.GetGameLoadsByCountry();
        _speciesCount = (await AnalyticsResultService.GetSpeciesSavedCount())
            .Where(s => s.Count > 1)
            .ToList();
        
        _itemsCount = (await AnalyticsResultService.GetItemChangedCount())
            .Where(s => s.Count > 1)
            .ToList();
    }
    
    public class Data : ITreemapData<TreemapDataItem>
    {
        public required string Name { get; set; }
        public required IEnumerable<TreemapDataItem> Children { get; set; }
        public int Value { get; set; }
    }

    public class TreemapDataItem
    {
        public required string Name { get; set; }
        public decimal Value { get; set; }
    }

}

<style>
    .chart_deck {
        display: flex;
        width: 100%; 
        gap: 20px;
    }
    
    .chart_card {
        min-width: 250px;
        flex: 1;
    }
</style>
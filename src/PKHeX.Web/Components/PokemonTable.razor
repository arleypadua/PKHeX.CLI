@inject NavigationManager Navigation

<Table
    TItem="Pokemon"
    DataSource="@DataSource"
    PageIndex="@(PageIndex ?? 1)"
    PageSize="@(PageSize ?? 10)"
    OnPageSizeChange="HandlePagination"
    OnPageIndexChange="HandlePagination"
    Size="TableSize.Small"
    Responsive
    EnableVirtualization>
    <PropertyColumn Title="" Property="@(c => c.Species)">
        <PokemonIcon Species="@context.Species" Form="@context.Form.Form" />
    </PropertyColumn>
    <PropertyColumn Title="Name" Property="@(c => c.Species.Name())" Sortable Filterable/>
    <PropertyColumn Title="Level" Property="c => c.Level" Sortable Filterable></PropertyColumn>
    <ActionColumn Title="Action">
        <Space Size=@("small")>
            <SpaceItem>
                <Button
                    Type="@ButtonType.Link"
                    OnClick='() => Navigation.NavigateToPokemon(Source, context.UniqueId)'>
                    View
                </Button>
            </SpaceItem>
            <SpaceItem>
                <Button
                    Type="@ButtonType.Link"
                    OnClick='() => Navigation.NavigateToNewCloneOf(context.UniqueId)'>
                    Clone
                </Button>
            </SpaceItem>
        </Space>
    </ActionColumn>
</Table>

@code {
    [Parameter] public IList<Pokemon> DataSource { get; set; } = [];
    [Parameter] public PokemonSource Source { get; set; }
    
    [SupplyParameterFromQuery(Name = "pageIndex")]
    public int? PageIndex { get; set; } = 1;
    
    [SupplyParameterFromQuery(Name = "pageSize")]
    public int? PageSize { get; set; } = 10;

    private string Route => Source switch
    {
        PokemonSource.Party => "party",
        PokemonSource.Box => "box",
        _ => string.Empty
    };

    private void HandlePagination(PaginationEventArgs args)
    {
        PageIndex = args.Page;
        PageSize = args.PageSize;
        
        Navigation.StoreOnQuery(new () { { "pageIndex", PageIndex }, { "pageSize", PageSize } });
    }

}
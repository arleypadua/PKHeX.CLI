@using PKHeX.Facade.Repositories

<Select TItem="ItemDefinition"
        TItemValue="ushort?"
        DataSource="@Items"
        @bind-Value="@SelectedItemId"
        OnSelectedItemChanged="SelectedItemChangedInternal"
        LabelName="@nameof(ItemDefinition.Name)"
        ValueName="@nameof(ItemDefinition.Id)"
        Placeholder="Select an item"
        DefaultActiveFirstOption="false"
        EnableSearch
        EnableVirtualization>
    <LabelTemplate>
        @RenderItem(context)
    </LabelTemplate>
    <ItemTemplate>
        @RenderItem(context)
    </ItemTemplate>
</Select>

@code {
    [Parameter] public required IEnumerable<ItemDefinition> Items { get; set; }
    [Parameter] public ISet<ItemDefinition>? LegalItems { get; set; } = null;

    [Parameter] public ushort? SelectedItemId { get; set; }
    [Parameter] public EventCallback<ItemDefinition> SelectedItemChanged { get; set; }
    
    private bool _dataSourceJustLoaded = true;

    RenderFragment RenderItem(ItemDefinition item)
    {
        var legalItem = LegalItems == null || LegalItems.Contains(item)
            ? string.Empty
            : "item_selector__item_template__illegal";
        
        return
            @<Space Style="gap: 5px;" Class="@legalItem">
                <ItemIcon Item="@item"/> <span>@item.Name</span>
            </Space>;
    }

    private Task SelectedItemChangedInternal(ItemDefinition arg)
    {
        if (_dataSourceJustLoaded)
        {
            _dataSourceJustLoaded = false;
            return Task.CompletedTask;
        }
        
        return SelectedItemChanged.InvokeAsync(arg);
    }

}

<style>
    .item_selector__item_template__illegal {
        color: #5e2e24;
    }
</style>